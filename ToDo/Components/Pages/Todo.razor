@using MongoDB.Bson;
@using ToDo.Components;
@using ToDo.Models;
@using ToDo.Services;
@inject TodoService TodoService
@page "/"
@rendermode InteractiveServer



<EditForm Model="@newTodo" OnValidSubmit="HandleValidSubmit" FormName="AddTodo">


    <div class="form-group">
        <label for="todo">What you need to do?</label>
        <InputText id="todotext" class="form-control" autocomplete="off" @bind-Value="newTodo.TodoText"  required />
    </div>
    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
        <button type="submit" class="btn btn-primary mt-3">Add</button>
        <button class="btn btn-outline-warning mt-3" @onclick="() => Modal.Open()">Open Modal</button>
    </div>
</EditForm>
<button type="button" class="btn btn-danger mb-1" @onclick="() => DeleteVerify.Open()">Clear List</button>

@foreach(var todolist in TodoList)
 {
     <div class="item-container">
    <ul>
     <li class=@CheckForToggle(todolist) @onclick="()=>ToggleItem(todolist)">@todolist.TodoText</li>
    </ul>
        <div class="button-container">

            <button class="btn btn-light" @onclick="()=>PinItem(todolist)"><i class=@CheckForPin(todolist)></i></button>
            <button class="btn btn-close" @onclick="()=>DeleteItem(todolist)"></button>
        </div>
    </div>
}
<DeleteVerify @ref="DeleteVerify"></DeleteVerify>
<Modal @ref="Modal" OnTodoAdded="RefreshUI"></Modal>



@code {
    private List<TodoModel> TodoList = new List<TodoModel> { };
    private TodoModel newTodo = new TodoModel();
    private Modal Modal { get; set; } // For the pop up
    private DeleteVerify DeleteVerify { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TodoList = await TodoService.GetTodoListAsync();


    }
    public async Task RefreshUI()
    {
        TodoList = await TodoService.GetTodoListAsync();
    }
    public async Task HandleValidSubmit()
    {

        await TodoService.AddItemAsync(newTodo);
        newTodo = new TodoModel();

        await RefreshUI();

    }



    private async Task DeleteItem(TodoModel todoItem)
    {
        await TodoService.RemoveItemAsync(todoItem);

        await RefreshUI();
    }

    private async Task DeleteAll()
    {



        await TodoService.DeleteAll();

        await RefreshUI();
    }



    private async Task ToggleItem(TodoModel todoItem)
    {
        todoItem.IsChecked = !todoItem.IsChecked;

        await TodoService.UpdateItemAsync(todoItem);
        await RefreshUI();

    }

 
    private async Task PinItem(TodoModel todoItem)
    {

        todoItem.IsPinned = !todoItem.IsPinned;


        await TodoService.UpdateItemAsync(todoItem);
        await RefreshUI();

    }

    private string CheckForToggle(TodoModel todoItem)
    {
        return todoItem.IsChecked ? "checked" : "";
    }
    private string CheckForPin(TodoModel todoItem)
    {
        return todoItem.IsPinned ? "fa-solid fa-thumbtack-slash" : "fa-solid fa-thumbtack";
    }



}
